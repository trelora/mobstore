{
    "docs": [
        {
            "location": "/", 
            "text": "MobStore\n\n\nSource Code: https://github.com/trelora/mobstore\nNPM: https://www.npmjs.com/package/mobstore\n\n\nMobStore is a data-store layer for reactive javascript applications.\n\n\nMobStore is a thin layer on top of the brilliant Transparent Functional Reactive Programming library MobX. See \nMobX (formerly mobservable)\n for more information.\n\n\nMobStore takes hierarchical JSON data and turns it back into a graph.\n\n\nMobStore automatically hooks up bidirectional, potentially circular references based on the associations you define, and makes the entire graph reactive, so you can change any part of your data and see the results in your UI immediately.", 
            "title": "Home"
        }, 
        {
            "location": "/#mobstore", 
            "text": "Source Code: https://github.com/trelora/mobstore\nNPM: https://www.npmjs.com/package/mobstore  MobStore is a data-store layer for reactive javascript applications.  MobStore is a thin layer on top of the brilliant Transparent Functional Reactive Programming library MobX. See  MobX (formerly mobservable)  for more information.  MobStore takes hierarchical JSON data and turns it back into a graph.  MobStore automatically hooks up bidirectional, potentially circular references based on the associations you define, and makes the entire graph reactive, so you can change any part of your data and see the results in your UI immediately.", 
            "title": "MobStore"
        }, 
        {
            "location": "/overview/", 
            "text": "Overview\n\n\nSetup\n\n\nHere's an example where we set up three data stores, each with associations to the other two. Notice that we are very explicit about the associations we set up. Nothing is magic. Only the associations you define are populated.\n\n\nimport {MobStore} from 'mobstore';\n\nconst postStore = new MobStore({\n  collectionName: \nposts\n,  // the accessor, i.e. `postStore.posts`\n  type: \npost\n,             // this store holds items of the `post` type.\n  associations: [\n    {\n      key: \ncomments\n,      // a post has a `myPost.comments` key\n      type: \ncomment\n,      // this association holds items of the `comment` type.\n      plural: true,         // it's an array of them, not a single one.\n      inverse: {\n        key: \npost\n,        // a comment will have a `myComment.post` key\n        plural: false       // optional, false is the default\n      }\n    },\n    {\n      key: \nauthor\n,\n      type: \nperson\n,\n      plural: false,\n      inverse: {\n        key: \npost\n\n      }\n    }\n  ]\n});\n\nconst commentStore = new MobStore({\n  collectionName: \ncomments\n,\n  type: \ncomment\n,\n  associations: [\n    {\n      key: \npost\n,\n      type: \npost\n,\n      inverse: {\n        key: \ncomments\n,\n        plural: true\n      }\n    },\n    {\n      key: \ncommenter\n,\n      type: \nperson\n,\n      inverse: {\n        key: \ncomments\n,\n        plural: true\n      }\n    }\n  ]\n});\n\nconst peopleStore = new MobStore({\n  collectionName: \npeople\n,\n  type: \nperson\n,\n  associations: [\n    {\n      key: \nposts\n,\n      type: \npost\n,\n      plural: true,\n      inverse: {\n        key: \nauthor\n,\n        plural: true\n      }\n    },\n    {\n      key: \ncomments\n,\n      type: \ncomment\n,\n      plural: true,\n      inverse: {\n        key: \ncommenter\n\n      }\n    }\n  ]\n});\n\n\n\n\nUsage\n\n\nNow, we can take some JSON data that we got from the server and inject it into our stores.\n\n\nconst dataFromServer = {\n  id: 42,\n  title: \nHow to make an app\n,\n  author: {\n    id: 12,\n    name: \nMark Twain\n\n  },\n  comments: [\n    {\n      id: 3,\n      text: \nThis article is great.\n,\n      commenter: {\n        id: 13,\n        name: \nAldous Huxley\n\n      }\n    },\n    {\n      id: 4,\n      text: \nThis article sucks.\n,\n      commenter: {\n        id: 14,\n        name: \nJared Diamond\n\n      }\n    }\n  ]\n}\n\npostStore.inject(dataFromServer);\n\n\n\n\nNotice that with the single call to \n.inject\n with the nested data, we have populated all three stores with their appropriate data, and each has the correct references to all of their associations.\n\n\npostStore.posts\n// [ {id:42, title: \nHow to make an app\n, author: {id: 12...}, comments: [...]} ]\n\npeopleStore.people\n// [\n//   {id:12, name: \nMark Twain\n, posts: [...], comments: [...]},\n//   {id:13, name: \nAldous Huxley\n, posts: [...], comments: [...]},\n//   {id:14, name: \nJared Diamond\n, posts: [...], comments: [...]},\n// ]\n\ncommentStore.comments\n// [\n//   {id: 3, text: \nThis article is great.\n, post: {id: 42,...}, author: {id: 13...}}\n//   {id: 4, text: \nThis article sucks.\n, post: {id: 42...}, author: {id: 14...}}\n// ]\n\n\n\n\nAll of the references are hooked up like you would expect.\n\n\npeopleStore.people[0].posts[0].comments[0].author\n// {id:13, name: \nAldous Huxley\n, posts: [...], comments: [...]}\n\n\n\n\nUse with React\n\n\nIf you use this data store together with \nmobx-react\n, your React components will automatically re-render when you update your data by injecting more data into any of the stores, or by changing any of the scalar values of your objects.\n\n\n@observer\nclass PostsContainer extends React.Component {\n  render() {\n    return (\n      \nPostsList\n        posts={postsStore.posts}\n      /\n\n    );\n  }\n}\n\n//...\n\n\n// add a new comment. by including the ids of the associations, they will get hooked up properly.\ncommentStore.inject({\n  id: 5,\n  text: \nSpam\n,\n  post: { id: 42},\n  author: { id: 12 }\n})\n\n//...\n\n// update the author's name. this will show immediately in the UI if the name field is used somewhere.\nconst mark = peopleStore.people[0]\nmark.name = \nTwark Main", 
            "title": "Overview"
        }, 
        {
            "location": "/overview/#overview", 
            "text": "", 
            "title": "Overview"
        }, 
        {
            "location": "/overview/#setup", 
            "text": "Here's an example where we set up three data stores, each with associations to the other two. Notice that we are very explicit about the associations we set up. Nothing is magic. Only the associations you define are populated.  import {MobStore} from 'mobstore';\n\nconst postStore = new MobStore({\n  collectionName:  posts ,  // the accessor, i.e. `postStore.posts`\n  type:  post ,             // this store holds items of the `post` type.\n  associations: [\n    {\n      key:  comments ,      // a post has a `myPost.comments` key\n      type:  comment ,      // this association holds items of the `comment` type.\n      plural: true,         // it's an array of them, not a single one.\n      inverse: {\n        key:  post ,        // a comment will have a `myComment.post` key\n        plural: false       // optional, false is the default\n      }\n    },\n    {\n      key:  author ,\n      type:  person ,\n      plural: false,\n      inverse: {\n        key:  post \n      }\n    }\n  ]\n});\n\nconst commentStore = new MobStore({\n  collectionName:  comments ,\n  type:  comment ,\n  associations: [\n    {\n      key:  post ,\n      type:  post ,\n      inverse: {\n        key:  comments ,\n        plural: true\n      }\n    },\n    {\n      key:  commenter ,\n      type:  person ,\n      inverse: {\n        key:  comments ,\n        plural: true\n      }\n    }\n  ]\n});\n\nconst peopleStore = new MobStore({\n  collectionName:  people ,\n  type:  person ,\n  associations: [\n    {\n      key:  posts ,\n      type:  post ,\n      plural: true,\n      inverse: {\n        key:  author ,\n        plural: true\n      }\n    },\n    {\n      key:  comments ,\n      type:  comment ,\n      plural: true,\n      inverse: {\n        key:  commenter \n      }\n    }\n  ]\n});", 
            "title": "Setup"
        }, 
        {
            "location": "/overview/#usage", 
            "text": "Now, we can take some JSON data that we got from the server and inject it into our stores.  const dataFromServer = {\n  id: 42,\n  title:  How to make an app ,\n  author: {\n    id: 12,\n    name:  Mark Twain \n  },\n  comments: [\n    {\n      id: 3,\n      text:  This article is great. ,\n      commenter: {\n        id: 13,\n        name:  Aldous Huxley \n      }\n    },\n    {\n      id: 4,\n      text:  This article sucks. ,\n      commenter: {\n        id: 14,\n        name:  Jared Diamond \n      }\n    }\n  ]\n}\n\npostStore.inject(dataFromServer);  Notice that with the single call to  .inject  with the nested data, we have populated all three stores with their appropriate data, and each has the correct references to all of their associations.  postStore.posts\n// [ {id:42, title:  How to make an app , author: {id: 12...}, comments: [...]} ]\n\npeopleStore.people\n// [\n//   {id:12, name:  Mark Twain , posts: [...], comments: [...]},\n//   {id:13, name:  Aldous Huxley , posts: [...], comments: [...]},\n//   {id:14, name:  Jared Diamond , posts: [...], comments: [...]},\n// ]\n\ncommentStore.comments\n// [\n//   {id: 3, text:  This article is great. , post: {id: 42,...}, author: {id: 13...}}\n//   {id: 4, text:  This article sucks. , post: {id: 42...}, author: {id: 14...}}\n// ]  All of the references are hooked up like you would expect.  peopleStore.people[0].posts[0].comments[0].author\n// {id:13, name:  Aldous Huxley , posts: [...], comments: [...]}", 
            "title": "Usage"
        }, 
        {
            "location": "/overview/#use-with-react", 
            "text": "If you use this data store together with  mobx-react , your React components will automatically re-render when you update your data by injecting more data into any of the stores, or by changing any of the scalar values of your objects.  @observer\nclass PostsContainer extends React.Component {\n  render() {\n    return (\n       PostsList\n        posts={postsStore.posts}\n      / \n    );\n  }\n}\n\n//...\n\n\n// add a new comment. by including the ids of the associations, they will get hooked up properly.\ncommentStore.inject({\n  id: 5,\n  text:  Spam ,\n  post: { id: 42},\n  author: { id: 12 }\n})\n\n//...\n\n// update the author's name. this will show immediately in the UI if the name field is used somewhere.\nconst mark = peopleStore.people[0]\nmark.name =  Twark Main", 
            "title": "Use with React"
        }
    ]
}